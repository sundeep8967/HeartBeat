// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Corporate professional information
  title         String?
  company       String?
  industry      String?
  experience    Int?      // Years of experience
  salary        String?   // Salary range
  education     String?
  location      String?
  bio           String?
  
  // Marriage preferences
  gender        String?
  age           Int?
  lookingFor    String?   // Gender preference
  ageRange      String?   // e.g., "25-35"
  religion      String?
  interests     String?   // JSON string array of interests
  lifestyle     String?   // e.g., "Work-life balance", "Career-focused"
  relationshipGoals String? // e.g., "Marriage", "Long-term"
  
  // Social links
  linkedinUrl   String?
  twitterUrl    String?
  phoneNumber   String?   // Phone number for premium access
  
  // Account status
  isProfileComplete Boolean @default(false)
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)  // Email verification
  isPremium     Boolean   @default(false)  // Premium subscription
  verificationLevel String @default("basic") // basic, professional, executive
  premiumSince DateTime?

  accounts      Account[]
  sessions      Session[]
  matches       Match[]   @relation("UserMatches")
  likedBy       Match[]   @relation("LikedByUser")
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  premiumPurchases PremiumPurchase[]
  boyMeetings   Meeting[] @relation("BoyMeetings")
  girlMeetings  Meeting[] @relation("GirlMeetings")
  cabBookings   CabBooking[] @relation("CabBooker")
  cabRides      CabBooking[] @relation("CabPassenger")
  notifications Notification[]
  relatedNotifications Notification[] @relation("RelatedUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id          String   @id @default(cuid())
  userId      String
  likedUserId String
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserMatches", fields: [userId], references: [id], onDelete: Cascade)
  likedUser   User     @relation("LikedByUser", fields: [likedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, likedUserId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())

  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model PremiumPurchase {
  id          String   @id @default(cuid())
  userId      String
  targetUserId String
  type        String   // 'phone' or 'linkedin'
  amount      Int      // Price in rupees
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId, type])
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String?
  pincode     String?
  phone       String?
  email       String?
  website     String?
  cuisine     String?  // JSON array of cuisine types
  priceRange  String?  // e.g., "₹₹", "₹₹₹", "₹₹₹₹"
  rating      Float?   @default(0.0)
  images      String?  // JSON array of image URLs
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  meetings    Meeting[]
}

model Meeting {
  id          String   @id @default(cuid())
  boyUserId   String
  girlUserId  String
  restaurantId String
  dateTime    DateTime
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  paymentTier String   // "1000", "650", "500"
  boyPayment  Int      // Amount paid by boy
  girlPayment Int      // Amount to be paid by girl
  totalAmount Int      // Total amount for the meeting
  boyPaymentStatus String @default("pending") // pending, completed
  girlPaymentStatus String @default("pending") // pending, completed
  specialRequests String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  boyUser     User     @relation("BoyMeetings", fields: [boyUserId], references: [id], onDelete: Cascade)
  girlUser    User     @relation("GirlMeetings", fields: [girlUserId], references: [id], onDelete: Cascade)
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  cabBookings CabBooking[]
  notifications Notification[]

  @@unique([boyUserId, girlUserId, restaurantId, dateTime])
}

model CabBooking {
  id          String   @id @default(cuid())
  meetingId   String
  userId      String   // User who booked the cab
  passengerId String   // User for whom the cab is booked
  pickupLocation String
  dropLocation  String
  pickupTime  DateTime
  estimatedFare Int
  actualFare   Int?
  maxCoverage  Int      @default(350) // Maximum coverage amount
  userPayment  Int      // Amount paid by user
  passengerPayment Int  // Amount to be paid by passenger
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  bookingId   String?  // Uber booking ID
  driverDetails String? // JSON string with driver info
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user        User     @relation("CabBooker", fields: [userId], references: [id], onDelete: Cascade)
  passenger   User     @relation("CabPassenger", fields: [passengerId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'meeting_created', 'meeting_confirmed', 'meeting_cancelled', 'meeting_completed', 'cab_booked', 'payment_completed'
  title       String
  message     String
  userId      String
  relatedUserId String?
  meetingId   String?
  cabBookingId String?
  data        String?  // JSON string for additional data
  isRead      Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedUser User?    @relation("RelatedUser", fields: [relatedUserId], references: [id], onDelete: SetNull)
  meeting     Meeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)
  cabBooking  CabBooking? @relation(fields: [cabBookingId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([userId, isRead])
}